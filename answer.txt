Back-end Questions :
1.
• Backend: ใช้ NestJS สร้าง Aggregator API
   Endpoint: /api/products/aggregated-data
   ดึงข้อมูลจาก Customer API, Master Data API, และ Transaction Data API ผ่าน HTTP Service
   รวมข้อมูล (data aggregation) และจัดส่งข้อมูลรวมในรูปแบบ JSON
• Database: ใช้ PostgreSQL สำหรับ Materialized View หรือ Query Optimization เพื่อปรับปรุง Latency
• Real-Time: ใช้ WebSocket Gateway ของ NestJS หากต้องการอัปเดตข้อมูลแบบเรียลไทม์

2.
• กำหนดเป้าหมายและขอบเขต -> ระบุวัตถุประสงค์การทดสอบ, ฟีเจอร์หลัก หรือ จุดสำคัญ ที่ต้องทดสอบ
• เลือกเครื่องมือทดสอบ -> เช่น ใช้ JMeter หรือ k6 สำหรับ API/Backend
• สร้าง Test Scenarios -> Load Testing, Stress Testing, Endurance Testing
• เตรียม Test Environment -> ใช้ Environment ที่ใกล้เคียง Production มากที่สุด, สร้าง Mock Data ให้เหมือนข้อมูลจริง
• วัดและวิเคราะห์ผลลัพธ์ -> ใช้ Metric เช่น Response Time, Error Rate, CPU/Memory Usage
• รายงานผลและปรับปรุง -> สร้างรายงานสรุปผลการทดสอบ, เสนอแผนการปรับปรุงและทดสอบซ้ำในรอบถัดไป

3.คือตัวโปรเจคนี้
• Validation: ใช้ class-validator และ class-transformer
• Database Design: สร้าง table 2 table คือ products (table หลัก) และ product_translations (table สำหรับgเก็บข้อมูลหลายภาษา)
  โดยเมื่อมีการเพิ่ม product ขึ้นใหม่จะสร้างเลข id ขึ้นเองเป็น PK ใน table หลักและสร้างข้อมูลขึ้น 2 row ใน product_translations (เพราะ product ละ 2 ภาษา)
  โดยใน product_translations แต่ละ row จะมี id ที่ไม่ซ้ำกันเป็น PK และมี FK เป็น id ของ product ใน table หลัก (ใน 2 row ที่เกิดขึ้นจาก product เดียวกันจะมี FK เหมือนกัน)
• Testing Strategy: 
   - Unit Test: ใช้ Jest ทดสอบ Service และฟังก์ชันเฉพาะ เช่น findAll โดย Mock Repository เพื่อแยกการทำงานของ Business Logic ออกจาก Database
   - Integration Test: ทดสอบ Controller เพื่อให้มั่นใจว่าการเชื่อมต่อกับ Service และการจัดการ Request/Response ทำงานได้ถูกต้อง
   - End-to-End Test: ใช้ Postman หรือ Supertest ทดสอบ API ที่เชื่อมต่อกับ Database จริง เพื่อดูว่าข้อมูลที่ส่งกลับมาถูกต้องและครบถ้วน

React Questions :
1. useCallback ใช้ทําอะไร -> เป็น Hook ที่ใช้เพื่อสร้างและเก็บฟังก์ชันแบบเมมโมไรซ์ (memoized function) เพื่อลดการสร้างฟังก์ชันใหม่ในทุกการ Render ของคอมโพเนนต์ 
   ซึ่งช่วยปรับปรุงประสิทธิภาพในบางสถานการณ์ เช่น การส่งฟังก์ชันไปยัง Props ของ Child Component ที่เมมโมไรซ์อยู่
2. อยู่ใน folder frontend -> src -> UserProfile (ไม่ได้มีความเกี่ยวข้องกับโปรเจคหลัก)
